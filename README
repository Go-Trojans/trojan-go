TrojanGo : Go Game Using AlphaZero [Python, C++]


Requirements:
      1. Software : Keras (2.3.1) with tensorflow backend, Tensorflow 2.0 and higher (tested on tensorflow 2.1.1), Python 3.7 (tested on 3.7.7)
      
                    Preferred:
                    Try tensorflow 2.1.1 with CUDA 10.1 (cuDNN 7.6) OR tensorflow 2.0.0 with CUDA 10.0 (cuDNN 7.4) (ref: https://www.tensorflow.org/install/source#linux)
                    
                    To support multiprocessing with keras working in child processes, make sure child processes have start method as "spawn"
                    Read section "Contexts and start methods" for more details. Link: "https://docs.python.org/3/library/multiprocessing.html"
                    import multiprocessing
                    multiprocessing.set_start_method('spawn', force=True)
                    
      2. Hardware : Needed for Distributed Neural Network Training (tf.distribute.Strategy for parallel deep neural netwrok training)
                    Tested on AWS Machine Instance (AMI) p3.8xlarge instance type. 
                    Specs can be found here: https://aws.amazon.com/ec2/instance-types/p3/
                    In short, it has 4 GPUs (Tesla V100-SXM2)
                    
     3. OS:         Tested on macOS (version 10.14.5 (18F132)) 
                    Should run on the any UNIX based OS
           
     4. Libraries:  In case of any module error, install it.
                    Some of the Libraries are ...
                        core libraries:    keras (2.3.1), tensorflow(2.1.1), numpy, h5py, multiprocessing, shutil, 
                        utility libraries: inspect, platform, socket, json, importlib, pytest, 
                  


Pull the code from hithub:
            git clone https://github.com/Go-Trojans/trojan-go.git
 

How to run the code in virtual environment:
      1. create a directory :                  mkdir TROJANGO;cd TROJANGO
      2. Clone the git project :               git clone https://github.com/Go-Trojans/trojan-go.git 
                                                                 (please let me know if you face any Authentication error)
                                                                 
      3. Setup the virtual environment (https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/)
      
         I am listing down the commands for Linux/Mac Users. Windows users can use the above link.
         3.1 Updating pip :                     python3 -m pip install --user --upgrade pip
         3.2 Installing virtual env :           python3 -m pip install --user virtualenv
         3.3 Creating a virtual environment :   python3 -m venv env
         3.4 Activating a virtual environment:  source env/bin/activate
         
         You can confirm you’re in the virtual environment by checking the location of your Python interpreter, it should point to the env directory.
         which python3
         .../env/bin/python3
         
     4. $cd trojan-go/
        $Install the dependency libraries:      pip install -r requirements.txt
        
        NOTE: In case if you face any library issue while running the project, please install it using pip or any other tool. (e.g., platform, inspect, etc)
        
     5. $cd code
        """ To Test if the project is running properly or not, without any error """
            $python3  basic_testing.py      <<<< very easy program, using only model.predict                       ; you can debug too in case of error
            $python3 basic_testing_mp.py    <<<< very easy program, using multiprocessing alon with model.predict  ; you can debug too in case of error
            $python3 selfplay_train_eval_sync.py --no-production
            
            """ To run the project for actual training. Below one will be time taking as it is using 2500 games with 400 simulations per move """
            $python3 selfplay_train_eval_sync.py
            
     6. Verify
        VERIFY AND TAKE SNAPSHOTS OF EVERYTHING !!!
        
        6.0 Sample output flow is mentioned inside here ./console_verification.pdf and ./log_verification.pdf
            6.0.1 Make sure your console output is matching with console_verification.pdf (basically the blue colored output) 
                  If you want to save the console output to a file (run it before starting the main script):
                      $script console.log
                      $python3 selfplay_train_eval_sync.py --no-production
                      $exit
                      Now compare console.log with console_verification.pdf (which you can find the file in repo)
             OR
            6.0.2 Make sure your logfile output is matching with log_verification.pdf     (basically the highlighted colored output)
                  logfile will be created in the same directory where you are running the code and it will be in append mode, so check with timestamps or near to the end of the file.
                  logfile name = "trojango.log"
        
        6.1 Please copy the console output (mostly it will come in blue color).
        6.2 Please check CPU and GPU usage. (as we are using tf.distribute.Strategy for parallel nn training)
        6.3 Please verify for any GPU memory shortage. (because of tensorflow GPU memory allocation techniques)
        6.4 Please verfiy CPU and GPU is not seating Idle while code is running. (as we are using tf.distribute.Strategy for parallel nn training and python multiprocessing)
        
     7. To stop the code (in case you are actually training the model), use CTRL-C
     8. To Report an issue/error:
          8.1 Kindly send either console log after copying it from your console or console.log file if you have used "script" command.
          8.2 Kindly also share trojango.log
          Attach these two files and mail to "rupeshku@usc.edu" with subject "TrojanGo Issue".

How to run without virtual environment:
            $cd trojan-go/; pip install -r requirements.txt
             NOTE: In case while running if you face any library issue, please install it using pip or any other tool. (e.g., platform, inspect, etc)
            
            $cd ../trojan-go/code 
            """ To Test if the project is running properly or not """
            $python3 selfplay_train_eval_sync.py --no-production
            
            """ To run the project for actual training. Below one will be time taking as it is using 2500 games with 400 simulations per move """
            $python3 selfplay_train_eval_sync.py
            
            Self-play training pipeline. 
            TrojanGo's self play training pipeline consists of three main components, all executed asynchronously in parallel.
                  - Neural network parameters θi are continually optimized from recent self play data; 
                  - TrojanGo players αθi are continually evaluated; and 
                  - the best performing player so far, αθ*, is used to generate new self play data.
              
            NOTE: Follow step 6 mentioned above to verify and step 8 to report an issue/error.        
                    

Quick workaround if you are facing this error while running the project ...

 ISSUE:
     File "/Users/pujakumari/Downloads/new/env/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py", line 506, in _get_available_gpus
    _LOCAL_DEVICES = tf.config.experimental_list_devices()
    AttributeError: module 'tensorflow_core._api.v2.config' has no attribute 'experimental_list_devices'
    
 FIX: https://stackoverflow.com/questions/60581677/attributeerror-module-tensorflow-core-api-v2-config-has-no-attribute-expe
      I found source of problem in
      ...\anaconda3\envs\tf_env\Lib\site-packages\keras\backend\tensorflow_backend.py
      
      In line 506 I changed line
      _LOCAL_DEVICES = tf.config.experimental_list_devices()
      
      to

      devices = tf.config.list_logical_devices()
      _LOCAL_DEVICES = [x.name for x in devices]


Where to place your code:

Driver code              : trojan-go/code/
Input feature / encoding : trojan-go/code/algos/encoders/
Neural Network Coding    : trojan-go/code/algos/nn/
MCTS related Coding      : trojan-go/code/algos/mcts/
Reinforcement Learning   : trojan-go/code/algos/rl/
Go board and rules       : trojan-go/code/algos/
Temporary placeholding   : trojan-go/code/placeholder/
Sample code              : trojan-go/code/samples/
Self-Play generated games: trojan-go/code/generated_games
Checkpointed model       : trojan-go/code/checkpoints
Agent code               : trojan-go/code/algos/agent




code/                               Top-level package
      __init__.py                   Initialize the code package
      algos/                        Subpackage for all the algos realted coding
              __init__.py
              encoders/                     Subpackage for input features
                       __init__.py
                       README
                       config
                       base_encoder.py
                       trojangoPlabe.py
                       trojangoPlabe_test.py
                       utility.py
                       ...
              mcts/                         Subpackage for Monte Carlo Tree Search specific coding
                       __init__.py
                       ...
              nn/                           Subpackage for Neural Network (CNN and ResNet for Policy/Value Head)
                       __init__.py
                       large_nn.py
                       medium_nn.py
                       small_nn.py
                       ...
              rl/                           Subpackage for Reinforcement learning
                       __init__.py
                       ...
      placeholder/                  Subpackage for placeholder
              __init__.py
              ...
      generated_games/              Subpackage for generated_games
              __init__.py
              ...
      samples/                      Subpackage for samples
              __init__.py
              ...
      checkpoints/                  Subpackage for checkpoints
              __init__.py
              ...


