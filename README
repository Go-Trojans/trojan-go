TrojanGo : Go Game Using AlphaZero


Requirements:
      1. Software : Keras with tensorflow backend, Tensorflow 2.0 and higher (tested on tensorflow 2.1.1), Python 3.6
      
                    To support multiprocessing with keras working in child processes, make sure child processes have start method as "spawn"
                    Read section "Contexts and start methods" for more details. Link: "https://docs.python.org/3/library/multiprocessing.html"
                    import multiprocessing
                    multiprocessing.set_start_method('spawn', force=True)
                    
      2. Hardware : Needed for Distributed Neural Network Training (tf.distribute.Strategy for parallel deep neural netwrok training)
                    Tested on AWS Machine Instance (AMI) p3.8xlarge instance type. 
                    Specs can be found here: https://aws.amazon.com/ec2/instance-types/p3/
                    In short, it has 4 GPUs (Tesla V100-SXM2)


Pull the code from hithub:
            git clone https://github.com/Go-Trojans/trojan-go.git
            
How to run:
            $cd trojan-go/code 
            """ To Test if the project is running properly or not """
            $python3 selfplay_train_eval_sync.py -g 4 --simulations 10 --num-per-eval 8
            
            """ To run the project for actual training. Below one will be time taking as it is using 2500 games with 400 simulations per move """
            $python3 selfplay_train_eval_sync.py
            
            Self-play training pipeline. 
            TrojanGo's self play training pipeline consists of three main components, all executed asynchronously in parallel.
                  - Neural network parameters θi are continually optimized from recent self play data; 
                  - TrojanGo players αθi are continually evaluated; and 
                  - the best performing player so far, αθ*, is used to generate new self play data.
              
                    
                    



Where to place your code:

Driver code              : trojan-go/code/
Input feature / encoding : trojan-go/code/algos/encoders/
Neural Network Coding    : trojan-go/code/algos/nn/
MCTS related Coding      : trojan-go/code/algos/mcts/
Reinforcement Learning   : trojan-go/code/algos/rl/
Go board and rules       : trojan-go/code/algos/
Temporary placeholding   : trojan-go/code/placeholder/
Sample code              : trojan-go/code/samples/
Self-Play generated games: trojan-go/code/generated_games
Checkpointed model       : trojan-go/code/checkpoints
Agent code               : trojan-go/code/algos/agent




code/                               Top-level package
      __init__.py                   Initialize the code package
      algos/                        Subpackage for all the algos realted coding
              __init__.py
              encoders/                     Subpackage for input features
                       __init__.py
                       README
                       config
                       base_encoder.py
                       trojangoPlabe.py
                       trojangoPlabe_test.py
                       utility.py
                       ...
              mcts/                         Subpackage for Monte Carlo Tree Search specific coding
                       __init__.py
                       ...
              nn/                           Subpackage for Neural Network (CNN and ResNet for Policy/Value Head)
                       __init__.py
                       large_nn.py
                       medium_nn.py
                       small_nn.py
                       ...
              rl/                           Subpackage for Reinforcement learning
                       __init__.py
                       ...
      placeholder/                  Subpackage for placeholder
              __init__.py
              ...
      generated_games/              Subpackage for generated_games
              __init__.py
              ...
      samples/                      Subpackage for samples
              __init__.py
              ...
      checkpoints/                  Subpackage for checkpoints
              __init__.py
              ...


